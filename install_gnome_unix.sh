#!/bin/sh
#
# Script: install_gnome_unix.sh
# Description: Generic GNOME desktop environment installation for Unix-like systems
# Author: Generated by GitHub Copilot
# Date: May 26, 2025
#

# Use more portable POSIX compliant shell script syntax

# Exit on any error
set -e

# Define log file
LOG_FILE="/tmp/gnome_install_$(date +%Y%m%d_%H%M%S).log"
VERBOSE=false

# Check for root privileges
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "ERROR: This script must be run as root" | tee -a "$LOG_FILE"
        exit 1
    fi
}

# Function to log messages
log() {
    local message="$1"
    local timestamp
    timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    echo "[$timestamp] $message" >> "$LOG_FILE"
    
    if [ "$VERBOSE" = true ]; then
        echo "[$timestamp] $message"
    fi
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to detect Unix-like system type
detect_system() {
    # Try to identify the system
    SYSTEM="unknown"
    
    if command_exists uname; then
        OS_TYPE=$(uname -s)
        case "$OS_TYPE" in
            Linux*)
                SYSTEM="linux"
                ;;
            FreeBSD*)
                SYSTEM="freebsd"
                ;;
            NetBSD*)
                SYSTEM="netbsd"
                ;;
            OpenBSD*)
                SYSTEM="openbsd"
                ;;
            DragonFly*)
                SYSTEM="dragonfly"
                ;;
            SunOS*)
                SYSTEM="solaris"
                ;;
            Darwin*)
                SYSTEM="macos"
                ;;
            *)
                SYSTEM="unknown"
                ;;
        esac
    fi
    
    log "Detected system type: $SYSTEM"
}

# Function to detect package manager
detect_package_manager() {
    PKG_MANAGER="unknown"
    PKG_INSTALL="unknown"
    
    # Check for various package managers
    if command_exists apt-get; then
        PKG_MANAGER="apt-get"
        PKG_INSTALL="apt-get install -y"
        PKG_UPDATE="apt-get update -y"
    elif command_exists apt; then
        PKG_MANAGER="apt"
        PKG_INSTALL="apt install -y"
        PKG_UPDATE="apt update -y"
    elif command_exists dnf; then
        PKG_MANAGER="dnf"
        PKG_INSTALL="dnf install -y"
        PKG_UPDATE="dnf check-update -y"
    elif command_exists yum; then
        PKG_MANAGER="yum"
        PKG_INSTALL="yum install -y"
        PKG_UPDATE="yum check-update -y"
    elif command_exists pacman; then
        PKG_MANAGER="pacman"
        PKG_INSTALL="pacman -S --noconfirm"
        PKG_UPDATE="pacman -Syu --noconfirm"
    elif command_exists zypper; then
        PKG_MANAGER="zypper"
        PKG_INSTALL="zypper install -y"
        PKG_UPDATE="zypper refresh"
    elif command_exists pkg; then
        PKG_MANAGER="pkg"
        PKG_INSTALL="pkg install -y"
        PKG_UPDATE="pkg update"
    elif command_exists pkg_add; then
        PKG_MANAGER="pkg_add"
        PKG_INSTALL="pkg_add"
        PKG_UPDATE="pkg_add -u"
    elif command_exists pkgin; then
        PKG_MANAGER="pkgin"
        PKG_INSTALL="pkgin install"
        PKG_UPDATE="pkgin update"
    elif command_exists brew; then
        PKG_MANAGER="brew"
        PKG_INSTALL="brew install"
        PKG_UPDATE="brew update"
    else
        log "ERROR: No supported package manager found"
        echo "Could not detect a supported package manager."
        echo "This script requires a package manager to install GNOME."
        exit 1
    fi
    
    log "Detected package manager: $PKG_MANAGER"
}

# Function to install GNOME
install_gnome() {
    log "Installing GNOME desktop environment using $PKG_MANAGER..."
    
    # Update package repositories
    log "Updating package repositories..."
    eval "$PKG_UPDATE" || {
        log "ERROR: Failed to update package repositories"
        exit 1
    }
    
    # Determine package names based on package manager
    case "$PKG_MANAGER" in
        apt|apt-get)
            if [ "$MINIMAL" = true ]; then
                PACKAGES="gnome-shell gnome-terminal gnome-control-center gnome-tweaks"
            else
                PACKAGES="gnome gnome-shell gnome-tweaks gnome-session gdm3"
            fi
            ;;
        dnf|yum)
            if [ "$MINIMAL" = true ]; then
                PACKAGES="@gnome-desktop-environment"
            else
                if [ "$PKG_MANAGER" = "dnf" ]; then
                    PACKAGES="@gnome"
                else
                    PACKAGES="@gnome-desktop"
                fi
            fi
            ;;
        pacman)
            if [ "$MINIMAL" = true ]; then
                PACKAGES="gnome-shell gnome-terminal gnome-control-center gnome-tweaks"
            else
                PACKAGES="gnome gnome-extra"
            fi
            ;;
        zypper)
            if [ "$MINIMAL" = true ]; then
                PACKAGES="-t pattern gnome_basis"
            else
                PACKAGES="-t pattern gnome"
            fi
            ;;
        pkg|pkg_add|pkgin)
            if [ "$MINIMAL" = true ]; then
                PACKAGES="x11/gnome/shell x11/gnome/terminal x11/gnome/control-center"
            else
                PACKAGES="x11/gnome"
            fi
            ;;
        brew)
            log "ERROR: Installing GNOME via Homebrew is not supported"
            echo "macOS does not support installing GNOME through Homebrew."
            echo "Please use XQuartz or another solution for macOS."
            exit 1
            ;;
        *)
            log "ERROR: Unsupported package manager for GNOME installation"
            exit 1
            ;;
    esac
    
    # Install GNOME packages
    log "Installing GNOME packages: $PACKAGES"
    eval "$PKG_INSTALL $PACKAGES" || {
        log "ERROR: Failed to install GNOME packages"
        exit 1
    }
    
    # Configure display manager based on system and package manager
    configure_display_manager
    
    log "GNOME installation completed"
}

# Function to configure display manager
configure_display_manager() {
    log "Configuring display manager..."
    
    case "$SYSTEM" in
        linux)
            # Enable display manager service if systemd is available
            if command_exists systemctl; then
                if [ -f /lib/systemd/system/gdm.service ] || [ -f /usr/lib/systemd/system/gdm.service ]; then
                    systemctl enable gdm.service || log "Warning: Failed to enable GDM service"
                elif [ -f /lib/systemd/system/gdm3.service ] || [ -f /usr/lib/systemd/system/gdm3.service ]; then
                    systemctl enable gdm3.service || log "Warning: Failed to enable GDM3 service"
                fi
                
                # Set default target to graphical
                systemctl set-default graphical.target || log "Warning: Failed to set graphical target"
            # For non-systemd systems
            elif [ -d /etc/init.d ] || [ -d /etc/rc.d/init.d ]; then
                if [ -f /etc/init.d/gdm ]; then
                    update-rc.d gdm defaults || log "Warning: Failed to configure GDM startup"
                elif [ -f /etc/init.d/gdm3 ]; then
                    update-rc.d gdm3 defaults || log "Warning: Failed to configure GDM3 startup"
                fi
            fi
            ;;
        freebsd|netbsd|openbsd|dragonfly)
            # Configure rc.conf for BSD systems
            if [ -f /etc/rc.conf ]; then
                if ! grep -q 'gdm_enable="YES"' /etc/rc.conf; then
                    echo 'gdm_enable="YES"' >> /etc/rc.conf
                fi
                if ! grep -q 'gnome_enable="YES"' /etc/rc.conf; then
                    echo 'gnome_enable="YES"' >> /etc/rc.conf
                fi
            fi
            ;;
        solaris)
            # Solaris-specific configuration
            if command_exists svccfg && command_exists svcadm; then
                svccfg -s desktop-login:gdm setprop options/default=true || log "Warning: Failed to configure GDM"
                svcadm refresh desktop-login:gdm || log "Warning: Failed to refresh GDM service"
                svcadm enable desktop-login:gdm || log "Warning: Failed to enable GDM service"
            fi
            ;;
        *)
            log "Warning: Display manager configuration not implemented for this system"
            ;;
    esac
}

# Display usage information
show_usage() {
    cat << EOF
Usage: $0 [options]

Options:
  -h, --help     Show this help message and exit
  -v, --verbose  Enable verbose output
  -m, --minimal  Install minimal GNOME desktop
  -y, --yes      Automatic yes to prompts

Description:
  This script automatically installs the GNOME desktop environment
  on various Unix-like systems without requiring user intervention.
EOF
}

# Parse command-line arguments
parse_args() {
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -h|--help)
                show_usage
                exit 0
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -m|--minimal)
                MINIMAL=true
                shift
                ;;
            -y|--yes)
                AUTO_YES=true
                shift
                ;;
            *)
                echo "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
}

# Main function
main() {
    # Initialize variables
    MINIMAL=false
    AUTO_YES=false
    
    # Parse command-line arguments
    parse_args "$@"
    
    # Check for root privileges
    check_root
    
    log "=== Starting GNOME Installation ==="
    log "Script version: 1.0"
    
    # Detect system type and package manager
    detect_system
    detect_package_manager
    
    # Ask for confirmation unless --yes is specified
    if [ "$AUTO_YES" != true ]; then
        echo "This script will install GNOME desktop environment on your $SYSTEM system."
        echo "Do you want to continue? (y/N): "
        read -r answer
        if [ "$answer" != "y" ] && [ "$answer" != "Y" ]; then
            log "Installation aborted by user"
            exit 0
        fi
    fi
    
    # Install GNOME
    install_gnome
    
    log "=== GNOME Installation Completed Successfully ==="
    echo "GNOME has been successfully installed on your system."
    echo "You should restart your system to start using GNOME."
    echo "Log file is available at: $LOG_FILE"
}

# Run the main function with all passed arguments
main "$@"