#!/bin/sh
#
# Script: setup_xrdp_unix.sh
# Description: Generic XRDP server setup for Unix-like systems
# Author: Generated by GitHub Copilot
# Date: May 26, 2025
#

# Use more portable POSIX compliant shell script syntax

# Exit on any error
set -e

# Define log file
LOG_FILE="/tmp/xrdp_setup_$(date +%Y%m%d_%H%M%S).log"
VERBOSE=false
PORT=3389
AUTO_START=true
ENABLE_FIREWALL=true

# Check for root privileges
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "ERROR: This script must be run as root" | tee -a "$LOG_FILE"
        exit 1
    fi
}

# Function to log messages
log() {
    local message="$1"
    local timestamp
    timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    echo "[$timestamp] $message" >> "$LOG_FILE"
    
    if [ "$VERBOSE" = true ]; then
        echo "[$timestamp] $message"
    fi
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to detect Unix-like system type
detect_system() {
    # Try to identify the system
    SYSTEM="unknown"
    
    if command_exists uname; then
        OS_TYPE=$(uname -s)
        case "$OS_TYPE" in
            Linux*)
                SYSTEM="linux"
                ;;
            FreeBSD*)
                SYSTEM="freebsd"
                ;;
            NetBSD*)
                SYSTEM="netbsd"
                ;;
            OpenBSD*)
                SYSTEM="openbsd"
                ;;
            DragonFly*)
                SYSTEM="dragonfly"
                ;;
            SunOS*)
                SYSTEM="solaris"
                ;;
            Darwin*)
                SYSTEM="macos"
                ;;
            *)
                SYSTEM="unknown"
                ;;
        esac
    fi
    
    log "Detected system type: $SYSTEM"
}

# Function to detect package manager
detect_package_manager() {
    PKG_MANAGER="unknown"
    PKG_INSTALL="unknown"
    
    # Check for various package managers
    if command_exists apt-get; then
        PKG_MANAGER="apt-get"
        PKG_INSTALL="apt-get install -y"
        PKG_UPDATE="apt-get update -y"
    elif command_exists apt; then
        PKG_MANAGER="apt"
        PKG_INSTALL="apt install -y"
        PKG_UPDATE="apt update -y"
    elif command_exists dnf; then
        PKG_MANAGER="dnf"
        PKG_INSTALL="dnf install -y"
        PKG_UPDATE="dnf check-update -y"
    elif command_exists yum; then
        PKG_MANAGER="yum"
        PKG_INSTALL="yum install -y"
        PKG_UPDATE="yum check-update -y"
    elif command_exists pacman; then
        PKG_MANAGER="pacman"
        PKG_INSTALL="pacman -S --noconfirm"
        PKG_UPDATE="pacman -Syu --noconfirm"
    elif command_exists zypper; then
        PKG_MANAGER="zypper"
        PKG_INSTALL="zypper install -y"
        PKG_UPDATE="zypper refresh"
    elif command_exists pkg; then
        PKG_MANAGER="pkg"
        PKG_INSTALL="pkg install -y"
        PKG_UPDATE="pkg update"
    elif command_exists pkg_add; then
        PKG_MANAGER="pkg_add"
        PKG_INSTALL="pkg_add"
        PKG_UPDATE="pkg_add -u"
    elif command_exists pkgin; then
        PKG_MANAGER="pkgin"
        PKG_INSTALL="pkgin install"
        PKG_UPDATE="pkgin update"
    else
        log "ERROR: No supported package manager found"
        echo "Could not detect a supported package manager."
        echo "This script requires a package manager to install XRDP."
        exit 1
    fi
    
    log "Detected package manager: $PKG_MANAGER"
}

# Function to detect desktop environment
detect_desktop() {
    # Try to detect the current desktop environment
    if [ -n "$XDG_CURRENT_DESKTOP" ]; then
        DESKTOP="$XDG_CURRENT_DESKTOP"
    elif [ -n "$GNOME_DESKTOP_SESSION_ID" ]; then
        DESKTOP="GNOME"
    elif [ -n "$KDE_FULL_SESSION" ]; then
        DESKTOP="KDE"
    elif command_exists xprop && xprop -root _DT_SAVE_MODE 2> /dev/null | grep -q "xfce4"; then
        DESKTOP="XFCE"
    elif [ -n "$MATE_DESKTOP_SESSION_ID" ]; then
        DESKTOP="MATE"
    elif [ -n "$CINNAMON_VERSION" ]; then
        DESKTOP="Cinnamon"
    else
        # Check for installed desktop environments
        if command_exists gnome-session; then
            DESKTOP="GNOME"
        elif command_exists startkde || command_exists startplasma-x11; then
            DESKTOP="KDE"
        elif command_exists xfce4-session; then
            DESKTOP="XFCE"
        elif command_exists mate-session; then
            DESKTOP="MATE"
        elif command_exists cinnamon-session; then
            DESKTOP="Cinnamon"
        else
            DESKTOP="unknown"
        fi
    fi
    
    # Convert to lowercase for easier comparison
    DESKTOP=$(echo "$DESKTOP" | tr '[:upper:]' '[:lower:]')
    log "Detected desktop environment: $DESKTOP"
}

# Function to install XRDP
install_xrdp() {
    log "Installing XRDP using $PKG_MANAGER..."
    
    # Update package repositories
    log "Updating package repositories..."
    eval "$PKG_UPDATE" || {
        log "ERROR: Failed to update package repositories"
        exit 1
    }
    
    # Determine package names based on package manager and system
    case "$PKG_MANAGER" in
        apt-get|apt)
            PACKAGES="xrdp xorgxrdp"
            ;;
        dnf|yum)
            PACKAGES="xrdp tigervnc-server"
            ;;
        pacman)
            PACKAGES="xrdp xorg-server-xvfb tigervnc"
            ;;
        zypper)
            PACKAGES="xrdp tigervnc"
            ;;
        pkg)
            case "$SYSTEM" in
                freebsd)
                    PACKAGES="x11/xrdp net/tigervnc-server"
                    ;;
                *)
                    PACKAGES="xrdp tigervnc-server"
                    ;;
            esac
            ;;
        pkg_add|pkgin)
            PACKAGES="xrdp tigervnc"
            ;;
        *)
            log "ERROR: Unsupported package manager for XRDP installation"
            exit 1
            ;;
    esac
    
    # Install XRDP packages
    log "Installing XRDP packages: $PACKAGES"
    eval "$PKG_INSTALL $PACKAGES" || {
        log "ERROR: Failed to install XRDP packages"
        exit 1
    }
    
    # Configure XRDP
    configure_xrdp
    
    # Start and enable XRDP service
    start_xrdp_service
    
    log "XRDP installation completed"
}

# Function to configure XRDP
configure_xrdp() {
    log "Configuring XRDP..."
    
    # Backup original configuration
    if [ -f /etc/xrdp/xrdp.ini ]; then
        cp /etc/xrdp/xrdp.ini /etc/xrdp/xrdp.ini.backup || log "Warning: Failed to backup xrdp.ini"
    fi
    
    # Update the port if needed
    if [ "$PORT" != "3389" ] && [ -f /etc/xrdp/xrdp.ini ]; then
        log "Changing XRDP port to $PORT..."
        sed -i.bak "s/port=3389/port=$PORT/g" /etc/xrdp/xrdp.ini || {
            # Try alternative sed syntax for BSD systems
            sed -i "" "s/port=3389/port=$PORT/g" /etc/xrdp/xrdp.ini || {
                log "Warning: Failed to change XRDP port"
            }
        }
    fi
    
    # Configure desktop environment specific settings
    case "$DESKTOP" in
        *gnome*)
            log "Configuring XRDP for GNOME desktop..."
            
            # Create or update .xsession file for GNOME
            for user_home in /home/* /usr/home/*; do
                if [ -d "$user_home" ]; then
                    username=$(basename "$user_home")
                    session_file="$user_home/.xsession"
                    
                    echo "#!/bin/sh" > "$session_file"
                    echo "export XDG_SESSION_TYPE=x11" >> "$session_file"
                    echo "export GDK_BACKEND=x11" >> "$session_file"
                    
                    if command_exists gnome-session; then
                        echo "gnome-session" >> "$session_file"
                    else
                        echo "startgnome" >> "$session_file"
                    fi
                    
                    chmod +x "$session_file"
                    chown "$username:$username" "$session_file" 2>/dev/null || log "Warning: Failed to set ownership of .xsession file for $username"
                fi
            done
            
            # Fix GNOME-specific issues
            if [ -f /etc/xrdp/startwm.sh ]; then
                # Use POSIX-compliant sed
                sed -i.bak '/export/i\\nexport XDG_SESSION_TYPE=x11\\nexport GDK_BACKEND=x11\\n' /etc/xrdp/startwm.sh || {
                    # Try alternative method
                    cp /etc/xrdp/startwm.sh /etc/xrdp/startwm.sh.tmp
                    awk '/export/ && !done {print "export XDG_SESSION_TYPE=x11\nexport GDK_BACKEND=x11\n"; done=1} {print}' /etc/xrdp/startwm.sh.tmp > /etc/xrdp/startwm.sh
                    rm -f /etc/xrdp/startwm.sh.tmp
                }
            fi
            ;;
            
        *kde*|*plasma*)
            log "Configuring XRDP for KDE desktop..."
            
            # Create or update .xsession file for KDE
            for user_home in /home/* /usr/home/*; do
                if [ -d "$user_home" ]; then
                    username=$(basename "$user_home")
                    session_file="$user_home/.xsession"
                    
                    echo "#!/bin/sh" > "$session_file"
                    
                    if command_exists startkde; then
                        echo "startkde" >> "$session_file"
                    elif command_exists startplasma-x11; then
                        echo "startplasma-x11" >> "$session_file"
                    fi
                    
                    chmod +x "$session_file"
                    chown "$username:$username" "$session_file" 2>/dev/null || log "Warning: Failed to set ownership of .xsession file for $username"
                fi
            done
            ;;
            
        *xfce*)
            log "Configuring XRDP for XFCE desktop..."
            
            # Create or update .xsession file for XFCE
            for user_home in /home/* /usr/home/*; do
                if [ -d "$user_home" ]; then
                    username=$(basename "$user_home")
                    session_file="$user_home/.xsession"
                    
                    echo "#!/bin/sh" > "$session_file"
                    echo "xfce4-session" >> "$session_file"
                    
                    chmod +x "$session_file"
                    chown "$username:$username" "$session_file" 2>/dev/null || log "Warning: Failed to set ownership of .xsession file for $username"
                fi
            done
            ;;
            
        *mate*)
            log "Configuring XRDP for MATE desktop..."
            
            # Create or update .xsession file for MATE
            for user_home in /home/* /usr/home/*; do
                if [ -d "$user_home" ]; then
                    username=$(basename "$user_home")
                    session_file="$user_home/.xsession"
                    
                    echo "#!/bin/sh" > "$session_file"
                    echo "mate-session" >> "$session_file"
                    
                    chmod +x "$session_file"
                    chown "$username:$username" "$session_file" 2>/dev/null || log "Warning: Failed to set ownership of .xsession file for $username"
                fi
            done
            ;;
            
        *cinnamon*)
            log "Configuring XRDP for Cinnamon desktop..."
            
            # Create or update .xsession file for Cinnamon
            for user_home in /home/* /usr/home/*; do
                if [ -d "$user_home" ]; then
                    username=$(basename "$user_home")
                    session_file="$user_home/.xsession"
                    
                    echo "#!/bin/sh" > "$session_file"
                    echo "cinnamon-session" >> "$session_file"
                    
                    chmod +x "$session_file"
                    chown "$username:$username" "$session_file" 2>/dev/null || log "Warning: Failed to set ownership of .xsession file for $username"
                fi
            done
            ;;
            
        *)
            log "Warning: Unknown desktop environment. Using generic configuration."
            
            # Create a generic .xsession file
            for user_home in /home/* /usr/home/*; do
                if [ -d "$user_home" ]; then
                    username=$(basename "$user_home")
                    session_file="$user_home/.xsession"
                    
                    cat > "$session_file" << 'EOF'
#!/bin/sh
if command -v gnome-session > /dev/null; then
    gnome-session
elif command -v startkde > /dev/null; then
    startkde
elif command -v startplasma-x11 > /dev/null; then
    startplasma-x11
elif command -v xfce4-session > /dev/null; then
    xfce4-session
elif command -v mate-session > /dev/null; then
    mate-session
elif command -v cinnamon-session > /dev/null; then
    cinnamon-session
elif command -v startlxde > /dev/null; then
    startlxde
elif command -v openbox-session > /dev/null; then
    openbox-session
fi
EOF
                    
                    chmod +x "$session_file"
                    chown "$username:$username" "$session_file" 2>/dev/null || log "Warning: Failed to set ownership of .xsession file for $username"
                fi
            done
            ;;
    esac
    
    # Create XRDP session file for all desktop environments
    mkdir -p /etc/xrdp/sessions 2>/dev/null || log "Warning: Failed to create sessions directory"
    
    cat > /etc/xrdp/sessions/xsession.sh << 'EOF'
#!/bin/sh
. ~/.xsession
EOF
    chmod +x /etc/xrdp/sessions/xsession.sh || log "Warning: Failed to make xsession.sh executable"
    
    # Configure firewall if requested
    if [ "$ENABLE_FIREWALL" = true ]; then
        configure_firewall
    fi
}

# Function to configure firewall
configure_firewall() {
    log "Configuring firewall..."
    
    case "$SYSTEM" in
        linux)
            if command_exists ufw; then
                ufw allow $PORT/tcp || log "Warning: Failed to configure UFW firewall"
                ufw reload || log "Warning: Failed to reload UFW firewall"
            elif command_exists firewall-cmd; then
                firewall-cmd --permanent --add-port=$PORT/tcp || log "Warning: Failed to configure firewalld"
                firewall-cmd --reload || log "Warning: Failed to reload firewalld"
            elif command_exists iptables; then
                iptables -A INPUT -p tcp --dport $PORT -j ACCEPT || log "Warning: Failed to configure iptables"
            elif command_exists SuSEfirewall2; then
                SuSEfirewall2 open EXT TCP $PORT || log "Warning: Failed to configure SuSEfirewall2"
                SuSEfirewall2 start || log "Warning: Failed to restart SuSEfirewall2"
            fi
            ;;
            
        freebsd)
            if [ -f /etc/rc.conf ]; then
                # Check if pf is enabled
                if grep -q 'pf_enable="YES"' /etc/rc.conf; then
                    echo "pass in proto tcp to any port $PORT" >> /etc/pf.conf || log "Warning: Failed to update PF firewall"
                    pfctl -f /etc/pf.conf || log "Warning: Failed to reload PF firewall"
                # Check if ipfw is enabled
                elif grep -q 'firewall_enable="YES"' /etc/rc.conf; then
                    ipfw add allow tcp from any to any $PORT || log "Warning: Failed to update IPFW firewall"
                fi
            fi
            ;;
            
        netbsd|openbsd)
            if [ -f /etc/pf.conf ]; then
                echo "pass in proto tcp to any port $PORT" >> /etc/pf.conf || log "Warning: Failed to update PF firewall"
                pfctl -f /etc/pf.conf || log "Warning: Failed to reload PF firewall"
            fi
            ;;
            
        solaris)
            if command_exists ipfstat; then
                echo "pass in proto tcp from any to any port = $PORT" >> /etc/ipf/ipf.conf || log "Warning: Failed to update IPF firewall"
                svcadm restart network/ipfilter || log "Warning: Failed to restart IPF service"
            fi
            ;;
            
        *)
            log "Warning: Firewall configuration not implemented for this system"
            ;;
    esac
}

# Function to start and enable XRDP service
start_xrdp_service() {
    log "Starting XRDP service..."
    
    case "$SYSTEM" in
        linux)
            # For systemd systems
            if command_exists systemctl; then
                if [ "$AUTO_START" = true ]; then
                    systemctl enable xrdp || log "Warning: Failed to enable XRDP service"
                fi
                systemctl start xrdp || log "Warning: Failed to start XRDP service"
            # For init.d systems
            elif [ -f /etc/init.d/xrdp ]; then
                if [ "$AUTO_START" = true ]; then
                    if command_exists chkconfig; then
                        chkconfig xrdp on || log "Warning: Failed to enable XRDP service"
                    elif command_exists update-rc.d; then
                        update-rc.d xrdp defaults || log "Warning: Failed to enable XRDP service"
                    fi
                fi
                /etc/init.d/xrdp start || log "Warning: Failed to start XRDP service"
            else
                log "Warning: Could not find method to start XRDP service"
            fi
            ;;
            
        freebsd|dragonfly)
            if [ "$AUTO_START" = true ] && [ -f /etc/rc.conf ]; then
                if ! grep -q 'xrdp_enable="YES"' /etc/rc.conf; then
                    echo 'xrdp_enable="YES"' >> /etc/rc.conf
                fi
                if ! grep -q 'xrdp_sesman_enable="YES"' /etc/rc.conf; then
                    echo 'xrdp_sesman_enable="YES"' >> /etc/rc.conf
                fi
            fi
            service xrdp start || log "Warning: Failed to start XRDP service"
            service xrdp_sesman start || log "Warning: Failed to start XRDP session manager"
            ;;
            
        netbsd|openbsd)
            if [ "$AUTO_START" = true ] && [ -d /etc/rc.d ]; then
                ln -sf /usr/local/etc/rc.d/xrdp /etc/rc.d/ || log "Warning: Failed to create XRDP startup link"
                ln -sf /usr/local/etc/rc.d/xrdp_sesman /etc/rc.d/ || log "Warning: Failed to create XRDP session manager startup link"
                echo 'xrdp=YES' >> /etc/rc.conf.local || log "Warning: Failed to enable XRDP in rc.conf.local"
                echo 'xrdp_sesman=YES' >> /etc/rc.conf.local || log "Warning: Failed to enable XRDP session manager in rc.conf.local"
            fi
            /usr/local/etc/rc.d/xrdp start || log "Warning: Failed to start XRDP service"
            /usr/local/etc/rc.d/xrdp_sesman start || log "Warning: Failed to start XRDP session manager"
            ;;
            
        solaris)
            if command_exists svcadm; then
                if [ "$AUTO_START" = true ]; then
                    svccfg import /lib/svc/manifest/application/xrdp.xml || log "Warning: Failed to import XRDP service manifest"
                fi
                svcadm enable xrdp || log "Warning: Failed to enable XRDP service"
                svcadm refresh xrdp || log "Warning: Failed to refresh XRDP service"
            fi
            ;;
            
        *)
            log "Warning: Starting XRDP service not implemented for this system"
            ;;
    esac
}

# Display usage information
show_usage() {
    cat << EOF
Usage: $0 [options]

Options:
  -h, --help              Show this help message and exit
  -v, --verbose           Enable verbose output
  -p, --port PORT         Specify the port for XRDP server (default: 3389)
  -n, --no-autostart      Don't enable XRDP service to start on boot
  -f, --no-firewall       Don't configure firewall
  -y, --yes               Automatic yes to prompts

Description:
  This script automatically installs and configures XRDP server
  on various Unix-like systems without requiring user intervention.
EOF
}

# Parse command-line arguments
parse_args() {
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -h|--help)
                show_usage
                exit 0
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -p|--port)
                PORT="$2"
                shift 2
                ;;
            -n|--no-autostart)
                AUTO_START=false
                shift
                ;;
            -f|--no-firewall)
                ENABLE_FIREWALL=false
                shift
                ;;
            -y|--yes)
                AUTO_YES=true
                shift
                ;;
            *)
                echo "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
}

# Main function
main() {
    # Initialize variables
    AUTO_YES=false
    
    # Parse command-line arguments
    parse_args "$@"
    
    # Check for root privileges
    check_root
    
    log "=== Starting XRDP Server Setup ==="
    log "Script version: 1.0"
    
    # Detect system type, package manager, and desktop environment
    detect_system
    detect_package_manager
    detect_desktop
    
    # Ask for confirmation unless --yes is specified
    if [ "$AUTO_YES" != true ]; then
        echo "This script will install XRDP server on your $SYSTEM system with $DESKTOP desktop."
        echo "XRDP will listen on port $PORT."
        echo "Do you want to continue? (y/N): "
        read -r answer
        if [ "$answer" != "y" ] && [ "$answer" != "Y" ]; then
            log "Installation aborted by user"
            exit 0
        fi
    fi
    
    # Install XRDP
    install_xrdp
    
    log "=== XRDP Server Setup Completed Successfully ==="
    
    # Display final information
    IP_ADDRESS=$(hostname -I 2>/dev/null || ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
    echo "XRDP has been successfully installed and configured on your system."
    echo "You can connect to this computer using any RDP client using the following details:"
    echo ""
    echo "  Server: $IP_ADDRESS"
    echo "  Port: $PORT"
    echo ""
    echo "Log file is available at: $LOG_FILE"
}

# Run the main function with all passed arguments
main "$@"