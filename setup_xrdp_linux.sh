#!/bin/bash
#
# Script: setup_xrdp_linux.sh
# Description: Automated XRDP server setup for Linux distributions
# Author: Generated by GitHub Copilot
# Date: May 26, 2025
#

# Exit on any error
set -e

# Define log file
LOG_FILE="/var/log/xrdp_setup_$(date +%Y%m%d_%H%M%S).log"
VERBOSE=false
PORT=3389
AUTO_START=true
ENABLE_FIREWALL=true

# Check for root privileges
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "ERROR: This script must be run as root" | tee -a "$LOG_FILE"
        exit 1
    fi
}

# Function to log messages
log() {
    local message="$1"
    local timestamp
    timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    echo "[$timestamp] $message" >> "$LOG_FILE"
    
    if [ "$VERBOSE" = true ]; then
        echo "[$timestamp] $message"
    fi
}

# Function to detect Linux distribution
detect_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        DISTRO="$ID"
        VERSION="$VERSION_ID"
    elif [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        DISTRO="$DISTRIB_ID"
        VERSION="$DISTRIB_RELEASE"
    elif [ -f /etc/debian_version ]; then
        DISTRO="debian"
        VERSION=$(cat /etc/debian_version)
    else
        DISTRO="unknown"
        VERSION="unknown"
    fi
    
    DISTRO=$(echo "$DISTRO" | tr '[:upper:]' '[:lower:]')
    log "Detected distribution: $DISTRO $VERSION"
}

# Function to detect desktop environment
detect_desktop() {
    # Try to detect the current desktop environment
    if [ -n "$XDG_CURRENT_DESKTOP" ]; then
        DESKTOP="$XDG_CURRENT_DESKTOP"
    elif [ -n "$GNOME_DESKTOP_SESSION_ID" ]; then
        DESKTOP="GNOME"
    elif [ -n "$KDE_FULL_SESSION" ]; then
        DESKTOP="KDE"
    elif xprop -root _DT_SAVE_MODE 2> /dev/null | grep -q "xfce4"; then
        DESKTOP="XFCE"
    elif [ -n "$MATE_DESKTOP_SESSION_ID" ]; then
        DESKTOP="MATE"
    elif [ -n "$CINNAMON_VERSION" ]; then
        DESKTOP="Cinnamon"
    else
        # Check for installed desktop environments
        if command -v gnome-session > /dev/null; then
            DESKTOP="GNOME"
        elif command -v startkde > /dev/null || command -v startplasma-x11 > /dev/null; then
            DESKTOP="KDE"
        elif command -v xfce4-session > /dev/null; then
            DESKTOP="XFCE"
        elif command -v mate-session > /dev/null; then
            DESKTOP="MATE"
        elif command -v cinnamon-session > /dev/null; then
            DESKTOP="Cinnamon"
        else
            DESKTOP="unknown"
        fi
    fi
    
    # Convert to lowercase for easier comparison
    DESKTOP=$(echo "$DESKTOP" | tr '[:upper:]' '[:lower:]')
    log "Detected desktop environment: $DESKTOP"
}

# Function to install XRDP on Debian/Ubuntu
install_xrdp_debian() {
    log "Installing XRDP on Debian/Ubuntu..."
    
    # Update package lists
    apt-get update -y || {
        log "ERROR: Failed to update package lists"
        exit 1
    }
    
    # Install XRDP and required dependencies
    apt-get install -y xrdp xorgxrdp || {
        log "ERROR: Failed to install XRDP packages"
        exit 1
    }
    
    # Stop XRDP service for configuration
    systemctl stop xrdp || {
        log "Warning: Failed to stop XRDP service"
    }
    
    # Configure XRDP
    configure_xrdp
    
    # Start and enable XRDP service
    if [ "$AUTO_START" = true ]; then
        systemctl enable xrdp || log "Warning: Failed to enable XRDP service"
    fi
    systemctl start xrdp || {
        log "ERROR: Failed to start XRDP service"
        exit 1
    }
    
    # Configure firewall if requested
    if [ "$ENABLE_FIREWALL" = true ]; then
        if command -v ufw > /dev/null; then
            ufw allow $PORT/tcp || log "Warning: Failed to configure UFW firewall"
            ufw reload || log "Warning: Failed to reload UFW firewall"
        elif command -v iptables > /dev/null; then
            iptables -A INPUT -p tcp --dport $PORT -j ACCEPT || log "Warning: Failed to configure iptables"
            if command -v iptables-save > /dev/null; then
                iptables-save > /etc/iptables/rules.v4 || log "Warning: Failed to save iptables rules"
            fi
        fi
    fi
    
    # Set appropriate SELinux context if SELinux is enabled
    if command -v getenforce > /dev/null && [ "$(getenforce)" != "Disabled" ]; then
        if command -v setsebool > /dev/null; then
            setsebool -P xrdp_enable_homedirs on || log "Warning: Failed to set SELinux boolean for XRDP"
            if command -v restorecon > /dev/null; then
                restorecon -Rv /etc/xrdp || log "Warning: Failed to restore SELinux context for XRDP"
            fi
        fi
    fi
    
    log "XRDP installation completed successfully on Debian/Ubuntu"
}

# Function to install XRDP on Fedora/RHEL
install_xrdp_fedora() {
    log "Installing XRDP on Fedora/RHEL..."
    
    # Update packages
    if command -v dnf > /dev/null; then
        dnf update -y || {
            log "ERROR: Failed to update packages"
            exit 1
        }
        
        # Install XRDP and required dependencies
        dnf install -y xrdp tigervnc-server || {
            log "ERROR: Failed to install XRDP packages"
            exit 1
        }
    else
        yum update -y || {
            log "ERROR: Failed to update packages"
            exit 1
        }
        
        # Install XRDP and required dependencies
        yum install -y xrdp tigervnc-server || {
            log "ERROR: Failed to install XRDP packages"
            exit 1
        }
    fi
    
    # Stop XRDP service for configuration
    systemctl stop xrdp || {
        log "Warning: Failed to stop XRDP service"
    }
    
    # Configure XRDP
    configure_xrdp
    
    # Start and enable XRDP service
    if [ "$AUTO_START" = true ]; then
        systemctl enable xrdp || log "Warning: Failed to enable XRDP service"
    fi
    systemctl start xrdp || {
        log "ERROR: Failed to start XRDP service"
        exit 1
    }
    
    # Configure firewall if requested
    if [ "$ENABLE_FIREWALL" = true ]; then
        if command -v firewall-cmd > /dev/null; then
            firewall-cmd --permanent --add-port=$PORT/tcp || log "Warning: Failed to configure firewalld"
            firewall-cmd --reload || log "Warning: Failed to reload firewalld"
        elif command -v iptables > /dev/null; then
            iptables -A INPUT -p tcp --dport $PORT -j ACCEPT || log "Warning: Failed to configure iptables"
        fi
    fi
    
    # Set appropriate SELinux context if SELinux is enabled
    if command -v getenforce > /dev/null && [ "$(getenforce)" != "Disabled" ]; then
        if command -v setsebool > /dev/null; then
            setsebool -P xrdp_enable_homedirs on || log "Warning: Failed to set SELinux boolean for XRDP"
            if command -v restorecon > /dev/null; then
                restorecon -Rv /etc/xrdp || log "Warning: Failed to restore SELinux context for XRDP"
            fi
        fi
    fi
    
    log "XRDP installation completed successfully on Fedora/RHEL"
}

# Function to install XRDP on Arch Linux
install_xrdp_arch() {
    log "Installing XRDP on Arch Linux..."
    
    # Update package database
    pacman -Syu --noconfirm || {
        log "ERROR: Failed to update package database"
        exit 1
    }
    
    # Install XRDP and required dependencies
    pacman -S --noconfirm xrdp xorg-server-xvfb tigervnc || {
        log "ERROR: Failed to install XRDP packages"
        exit 1
    }
    
    # Stop XRDP service for configuration
    systemctl stop xrdp || {
        log "Warning: Failed to stop XRDP service"
    }
    
    # Configure XRDP
    configure_xrdp
    
    # Start and enable XRDP service
    if [ "$AUTO_START" = true ]; then
        systemctl enable xrdp || log "Warning: Failed to enable XRDP service"
    fi
    systemctl start xrdp || {
        log "ERROR: Failed to start XRDP service"
        exit 1
    }
    
    # Configure firewall if requested
    if [ "$ENABLE_FIREWALL" = true ]; then
        if command -v ufw > /dev/null; then
            ufw allow $PORT/tcp || log "Warning: Failed to configure UFW firewall"
            ufw reload || log "Warning: Failed to reload UFW firewall"
        elif command -v iptables > /dev/null; then
            iptables -A INPUT -p tcp --dport $PORT -j ACCEPT || log "Warning: Failed to configure iptables"
        fi
    fi
    
    log "XRDP installation completed successfully on Arch Linux"
}

# Function to install XRDP on openSUSE
install_xrdp_opensuse() {
    log "Installing XRDP on openSUSE..."
    
    # Update packages
    zypper refresh || {
        log "ERROR: Failed to refresh package repositories"
        exit 1
    }
    
    # Install XRDP and required dependencies
    zypper install -y xrdp tigervnc || {
        log "ERROR: Failed to install XRDP packages"
        exit 1
    }
    
    # Stop XRDP service for configuration
    systemctl stop xrdp || {
        log "Warning: Failed to stop XRDP service"
    }
    
    # Configure XRDP
    configure_xrdp
    
    # Start and enable XRDP service
    if [ "$AUTO_START" = true ]; then
        systemctl enable xrdp || log "Warning: Failed to enable XRDP service"
    fi
    systemctl start xrdp || {
        log "ERROR: Failed to start XRDP service"
        exit 1
    }
    
    # Configure firewall if requested
    if [ "$ENABLE_FIREWALL" = true ]; then
        if command -v firewall-cmd > /dev/null; then
            firewall-cmd --permanent --add-port=$PORT/tcp || log "Warning: Failed to configure firewalld"
            firewall-cmd --reload || log "Warning: Failed to reload firewalld"
        elif command -v SuSEfirewall2 > /dev/null; then
            SuSEfirewall2 open EXT TCP $PORT || log "Warning: Failed to configure SuSEfirewall2"
            SuSEfirewall2 start || log "Warning: Failed to restart SuSEfirewall2"
        fi
    fi
    
    log "XRDP installation completed successfully on openSUSE"
}

# Function to configure XRDP
configure_xrdp() {
    log "Configuring XRDP..."
    
    # Backup original configuration
    if [ -f /etc/xrdp/xrdp.ini ]; then
        cp /etc/xrdp/xrdp.ini /etc/xrdp/xrdp.ini.backup || log "Warning: Failed to backup xrdp.ini"
    fi
    
    # Update the port if needed
    if [ "$PORT" != "3389" ]; then
        log "Changing XRDP port to $PORT..."
        sed -i "s/port=3389/port=$PORT/g" /etc/xrdp/xrdp.ini || log "Warning: Failed to change XRDP port"
    fi
    
    # Configure desktop environment specific settings
    case "$DESKTOP" in
        *gnome*)
            log "Configuring XRDP for GNOME desktop..."
            
            # Create or update .xsession file for GNOME
            for user_home in /home/*; do
                if [ -d "$user_home" ]; then
                    username=$(basename "$user_home")
                    session_file="$user_home/.xsession"
                    
                    echo "#!/bin/bash" > "$session_file"
                    echo "export XDG_SESSION_TYPE=x11" >> "$session_file"
                    echo "export GDK_BACKEND=x11" >> "$session_file"
                    
                    if command -v gnome-session > /dev/null; then
                        echo "gnome-session" >> "$session_file"
                    else
                        echo "startgnome" >> "$session_file"
                    fi
                    
                    chmod +x "$session_file"
                    chown "$username:$username" "$session_file" || log "Warning: Failed to set ownership of .xsession file for $username"
                fi
            done
            
            # Fix GNOME-specific issues
            if [ -f /etc/xrdp/startwm.sh ]; then
                sed -i '/export/i export XDG_SESSION_TYPE=x11\nexport GDK_BACKEND=x11' /etc/xrdp/startwm.sh || log "Warning: Failed to update startwm.sh for GNOME"
            fi
            ;;
            
        *kde*|*plasma*)
            log "Configuring XRDP for KDE desktop..."
            
            # Create or update .xsession file for KDE
            for user_home in /home/*; do
                if [ -d "$user_home" ]; then
                    username=$(basename "$user_home")
                    session_file="$user_home/.xsession"
                    
                    echo "#!/bin/bash" > "$session_file"
                    
                    if command -v startkde > /dev/null; then
                        echo "startkde" >> "$session_file"
                    elif command -v startplasma-x11 > /dev/null; then
                        echo "startplasma-x11" >> "$session_file"
                    fi
                    
                    chmod +x "$session_file"
                    chown "$username:$username" "$session_file" || log "Warning: Failed to set ownership of .xsession file for $username"
                fi
            done
            ;;
            
        *xfce*)
            log "Configuring XRDP for XFCE desktop..."
            
            # Create or update .xsession file for XFCE
            for user_home in /home/*; do
                if [ -d "$user_home" ]; then
                    username=$(basename "$user_home")
                    session_file="$user_home/.xsession"
                    
                    echo "#!/bin/bash" > "$session_file"
                    echo "xfce4-session" >> "$session_file"
                    
                    chmod +x "$session_file"
                    chown "$username:$username" "$session_file" || log "Warning: Failed to set ownership of .xsession file for $username"
                fi
            done
            ;;
            
        *mate*)
            log "Configuring XRDP for MATE desktop..."
            
            # Create or update .xsession file for MATE
            for user_home in /home/*; do
                if [ -d "$user_home" ]; then
                    username=$(basename "$user_home")
                    session_file="$user_home/.xsession"
                    
                    echo "#!/bin/bash" > "$session_file"
                    echo "mate-session" >> "$session_file"
                    
                    chmod +x "$session_file"
                    chown "$username:$username" "$session_file" || log "Warning: Failed to set ownership of .xsession file for $username"
                fi
            done
            ;;
            
        *cinnamon*)
            log "Configuring XRDP for Cinnamon desktop..."
            
            # Create or update .xsession file for Cinnamon
            for user_home in /home/*; do
                if [ -d "$user_home" ]; then
                    username=$(basename "$user_home")
                    session_file="$user_home/.xsession"
                    
                    echo "#!/bin/bash" > "$session_file"
                    echo "cinnamon-session" >> "$session_file"
                    
                    chmod +x "$session_file"
                    chown "$username:$username" "$session_file" || log "Warning: Failed to set ownership of .xsession file for $username"
                fi
            done
            ;;
            
        *)
            log "Warning: Unknown desktop environment. Using generic configuration."
            
            # Create a generic .xsession file
            for user_home in /home/*; do
                if [ -d "$user_home" ]; then
                    username=$(basename "$user_home")
                    session_file="$user_home/.xsession"
                    
                    echo "#!/bin/bash" > "$session_file"
                    echo "if command -v gnome-session > /dev/null; then" >> "$session_file"
                    echo "    gnome-session" >> "$session_file"
                    echo "elif command -v startkde > /dev/null; then" >> "$session_file"
                    echo "    startkde" >> "$session_file"
                    echo "elif command -v startplasma-x11 > /dev/null; then" >> "$session_file"
                    echo "    startplasma-x11" >> "$session_file"
                    echo "elif command -v xfce4-session > /dev/null; then" >> "$session_file"
                    echo "    xfce4-session" >> "$session_file"
                    echo "elif command -v mate-session > /dev/null; then" >> "$session_file"
                    echo "    mate-session" >> "$session_file"
                    echo "elif command -v cinnamon-session > /dev/null; then" >> "$session_file"
                    echo "    cinnamon-session" >> "$session_file"
                    echo "elif command -v startlxde > /dev/null; then" >> "$session_file"
                    echo "    startlxde" >> "$session_file"
                    echo "elif command -v openbox-session > /dev/null; then" >> "$session_file"
                    echo "    openbox-session" >> "$session_file"
                    echo "fi" >> "$session_file"
                    
                    chmod +x "$session_file"
                    chown "$username:$username" "$session_file" || log "Warning: Failed to set ownership of .xsession file for $username"
                fi
            done
            ;;
    esac
    
    # Create XRDP session file for all desktop environments
    mkdir -p /etc/xrdp/sessions || log "Warning: Failed to create sessions directory"
    
    cat > /etc/xrdp/sessions/xsession.sh << 'EOF'
#!/bin/bash
. ~/.xsession
EOF
    chmod +x /etc/xrdp/sessions/xsession.sh || log "Warning: Failed to make xsession.sh executable"
    
    # Fix pulseaudio for better audio support
    if command -v pulseaudio > /dev/null; then
        log "Configuring PulseAudio for XRDP..."
        
        # Load module-xrdp-sink/source
        if [ ! -d /etc/pulse/default.pa.d ]; then
            mkdir -p /etc/pulse/default.pa.d || log "Warning: Failed to create PulseAudio config directory"
        fi
        
        cat > /etc/pulse/default.pa.d/xrdp.pa << 'EOF'
load-module module-native-protocol-unix auth-anonymous=1
load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1
EOF
        
        # Fix PulseAudio access
        if [ -f /etc/pulse/system.pa ]; then
            if ! grep -q "auth-anonymous=1" /etc/pulse/system.pa; then
                echo "load-module module-native-protocol-unix auth-anonymous=1" >> /etc/pulse/system.pa
            fi
        fi
    fi
    
    # Apply additional security hardening
    echo "allowed_users=anybody" > /etc/X11/Xwrapper.config || log "Warning: Failed to configure Xwrapper"
}

# Display usage information
show_usage() {
    cat << EOF
Usage: $0 [options]

Options:
  -h, --help              Show this help message and exit
  -v, --verbose           Enable verbose output
  -p, --port PORT         Specify the port for XRDP server (default: 3389)
  -n, --no-autostart      Don't enable XRDP service to start on boot
  -f, --no-firewall       Don't configure firewall
  -y, --yes               Automatic yes to prompts

Description:
  This script automatically installs and configures XRDP server
  on various Linux distributions without requiring user intervention.
EOF
}

# Parse command-line arguments
parse_args() {
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -h|--help)
                show_usage
                exit 0
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -p|--port)
                PORT="$2"
                shift 2
                ;;
            -n|--no-autostart)
                AUTO_START=false
                shift
                ;;
            -f|--no-firewall)
                ENABLE_FIREWALL=false
                shift
                ;;
            -y|--yes)
                AUTO_YES=true
                shift
                ;;
            *)
                echo "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
}

# Main function
main() {
    # Initialize variables
    AUTO_YES=false
    
    # Parse command-line arguments
    parse_args "$@"
    
    # Check for root privileges
    check_root
    
    log "=== Starting XRDP Server Setup ==="
    log "Script version: 1.0"
    
    # Detect Linux distribution and desktop environment
    detect_distro
    detect_desktop
    
    # Ask for confirmation unless --yes is specified
    if [ "$AUTO_YES" != true ]; then
        echo "This script will install XRDP server on your $DISTRO system with $DESKTOP desktop."
        echo "XRDP will listen on port $PORT."
        echo "Do you want to continue? (y/N): "
        read -r answer
        if [[ ! "$answer" =~ ^[Yy]$ ]]; then
            log "Installation aborted by user"
            exit 0
        fi
    fi
    
    # Install XRDP based on detected distribution
    case "$DISTRO" in
        ubuntu|debian|linuxmint|pop)
            install_xrdp_debian
            ;;
        fedora|rhel|centos|rocky|almalinux|oracle)
            install_xrdp_fedora
            ;;
        arch|manjaro|endeavouros)
            install_xrdp_arch
            ;;
        opensuse*|suse|sles)
            install_xrdp_opensuse
            ;;
        *)
            log "ERROR: Unsupported distribution: $DISTRO"
            echo "This script supports Ubuntu, Debian, Fedora, RHEL, CentOS, Arch Linux, and openSUSE."
            echo "For other Unix-like systems, please use the generic Unix script: setup_xrdp_unix.sh"
            exit 1
            ;;
    esac
    
    log "=== XRDP Server Setup Completed Successfully ==="
    
    # Display final information
    IP_ADDRESS=$(hostname -I | cut -d' ' -f1)
    echo "XRDP has been successfully installed and configured on your system."
    echo "You can connect to this computer using any RDP client using the following details:"
    echo ""
    echo "  Server: $IP_ADDRESS"
    echo "  Port: $PORT"
    echo ""
    echo "Log file is available at: $LOG_FILE"
}

# Run the main function with all passed arguments
main "$@"